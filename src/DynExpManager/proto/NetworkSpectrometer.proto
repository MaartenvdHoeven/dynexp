// This file is part of DynExp.

syntax = "proto3";

import public "Common.proto";

package DynExpProto.NetworkSpectrometer;

enum StateType
{
	Ready = 0;
	Recording = 1;
	WarningState = 2;
	ErrorState = 3;
}

enum ResultType
{
	OK = 0;
	GeneralError = 1;
}

message DeviceInfoMessage
{
	DynExpProto.Common.FrequencyUnitType FrequencyUnit = 1;
	DynExpProto.Common.IntensityUnitType IntensityUnit = 2;
	double HardwareMinFrequency = 3;
	double HardwareMaxFrequency = 4;
	double HardwareMinExposureTime_ms = 5;
	double HardwareMaxExposureTime_ms = 6;
}

message StateMessage
{
	StateType State = 1;
	bool SpectrumAvailable = 2;
	optional double Progress = 3;
}

message ExposureTimeMessage
{
	double Time_ms = 1;
}

message FrequencyRangeMessage
{
	double LowerFrequency = 1;
	double UpperFrequency = 2;
}

message SilentModeMessage
{
	bool Enable = 1;
}

message ResultMessage
{
	ResultType Result = 1;
}

message SampleMessage
{
	double Frequency = 1;
	double Value = 2;
}

message SpectrumMessage
{
	repeated SampleMessage Samples = 1;
	bool SpectrumAvailable = 2;
	ResultMessage ResultMsg = 3;
}

service NetworkSpectrometer
{
	rpc GetDeviceInfo (DynExpProto.Common.VoidMessage) returns (DeviceInfoMessage) {}
	rpc GetState (DynExpProto.Common.VoidMessage) returns (StateMessage) {}

	rpc SetExposureTime (ExposureTimeMessage) returns (DynExpProto.Common.VoidMessage) {}
	rpc GetExposureTime (DynExpProto.Common.VoidMessage) returns (ExposureTimeMessage) {}
	rpc SetFrequencyRange (FrequencyRangeMessage) returns (DynExpProto.Common.VoidMessage) {}
	rpc GetFrequencyRange (DynExpProto.Common.VoidMessage) returns (FrequencyRangeMessage) {}
	rpc SetSilentMode (SilentModeMessage) returns (DynExpProto.Common.VoidMessage) {}
	rpc GetSilentMode (DynExpProto.Common.VoidMessage) returns (SilentModeMessage) {}

	rpc RecordSpectrumAsync (DynExpProto.Common.VoidMessage) returns (ResultMessage) {}
	rpc Abort (DynExpProto.Common.VoidMessage) returns (DynExpProto.Common.VoidMessage) {}
	rpc GetSpectrum (DynExpProto.Common.VoidMessage) returns (SpectrumMessage) {}
}