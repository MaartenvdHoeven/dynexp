# @project        The CERN Tape Archive (CTA)
# @copyright      Copyright(C) 2015-2021 CERN
# @license        This program is free software: you can redistribute it and/or modify
#                 it under the terms of the GNU General Public License as published by
#                 the Free Software Foundation, either version 3 of the License, or
#                 (at your option) any later version.
#
#                 This program is distributed in the hope that it will be useful,
#                 but WITHOUT ANY WARRANTY; without even the implied warranty of
#                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#                 GNU General Public License for more details.
#
#                 You should have received a copy of the GNU General Public License
#                 along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#
# Generates C++ sources from the .proto files
#
# grpc_generate_cpp (<SRCS> <HDRS> <DEST> [<ARGN>...])
#
# SRCS - variable to define with autogenerated source files
# HDRS - variable to define with autogenerated header files
# DEST - directory where the source files will be created
# ARGN - .proto files
#
function(GRPC_GENERATE_CPP SRCS HDRS DEST)
	if(NOT ARGN)
		message(SEND_ERROR "Error: GRPC_GENERATE_CPP() called without any proto files")
		return()
	endif()

	set(DEST "${CMAKE_CURRENT_BINARY_DIR}/${DEST}")

	foreach(FIL ${ARGN})
		get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
		get_filename_component(ABS_PATH ${ABS_FIL} PATH)
		list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
		if(${_contains_already} EQUAL -1)
			list(APPEND _protobuf_include_path -I ${ABS_PATH})
		endif()
	endforeach()

	set(${SRCS})
	set(${HDRS})
	foreach(FIL ${ARGN})
		get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
		get_filename_component(FIL_WE ${FIL} NAME_WE)

		list(APPEND ${SRCS} "${DEST}/${FIL_WE}.grpc.pb.cc")
		list(APPEND ${HDRS} "${DEST}/${FIL_WE}.grpc.pb.h")

		add_custom_command(
			OUTPUT "${DEST}/${FIL_WE}.grpc.pb.cc" "${DEST}/${FIL_WE}.grpc.pb.h"
			COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
			ARGS --grpc_out=${DEST} ${_protobuf_include_path} --plugin=protoc-gen-grpc=${GRPC_CPP_PLUGIN} ${ABS_FIL}
			DEPENDS ${ABS_FIL} ${PROTOBUF_PROTOC_EXECUTABLE} gRPC::grpc_cpp_plugin
			COMMENT "Running C++ gRPC compiler on ${FIL}"
			VERBATIM)
	endforeach()

	set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
	set(${SRCS} ${${SRCS}} PARENT_SCOPE)
	set(${HDRS} ${${HDRS}} PARENT_SCOPE)
endfunction()

# Find gRPC CPP generator
find_program(GRPC_CPP_PLUGIN NAMES grpc_cpp_plugin)